name: Build and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      # AWS_REGION: ap-southeast-1 #add Github Actions Env Var
      # REPO_NAME: zirong-flask-xray-repo #add Github Actions Env Var
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR Repository Exists
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Check if repository exists
          REPO_EXISTS=$(aws ecr describe-repositories --region $AWS_REGION --repository-names $REPO_NAME --query "repositories[0].repositoryName" --output text 2>/dev/null || echo "None")

          if [ "$REPO_EXISTS" = "None" ]; then
            echo "Repository $REPO_NAME does not exist. Creating..."
            aws ecr create-repository --repository-name $REPO_NAME --region $AWS_REGION
            echo "Repository $REPO_NAME created."
          else
            echo "Repository $REPO_NAME already exists."
          fi

      - name: Build and Push Docker Image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME

          # Build and tag the image with the commit SHA
          docker build -t $IMAGE_URI:$IMAGE_TAG .

          # Push image to ECR with the commit SHA tag
          docker push $IMAGE_URI:$IMAGE_TAG

          # Optionally tag as 'latest'
          # docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          # docker push $IMAGE_URI:latest
